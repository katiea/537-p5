Log Structured File System

LFS first buffers all updates (including metadata) in an in-memory segment; when the segment is full, it is written to disk in one long, sequential transfer to an unused part of the disk.

It never overwrites existing data, always writing segments to a free part.

The issue: reads may be anywhere on the disk, but writes always have a choice.

Writing sequentially:
    How to transform all updates to the file system into a series of sequential writes?
        Write Data, called the D block, then that data's inode, I, right after it with I pointing D.
        
    
Writing sequentially and EFFECTIVELY:
    Point: Write a large number of coninuous writes (or one large write) to the drive.
    LFS uses WRITE BUFFERING.
        Before writing to disk, LFS keeps track of updates in memory; 
        when it has received a sufficient number of updates, it writes them to disk all at once.
        This chunk of updates if called a SEGMENT.
        LFS buffers in a local SEGMENT, then writes the entire segment to disk.
            So long as said SEGMENT is large enough, this is efficient.
            Example: say you have 4*D blocks to write for file "J" and one D block for file "k" -
                Write the Following: D0 D1 D2 D3 Inode(w/ ptrs to all "J" D), D0 Inode (w/PTRS to all "k")

How much do we buffer?
            
