Notes for P4A: Scalable Web Server

Your server program must be invoked exactly as follows:
 + prompt> server [portnum] [file-system-image]
    - portnum: the port number that the file server should listen on.
    - file-system-image: a file that contains the file system image.
        a. If file system image DNE, should create it and properly initialize it to include an empty root directory.
        
Client Library:
 + deals with the case where the server does not reply in a timely fashion
 +  should implement the interface as specified by mfs.h
 

Currently is a stand-alone UDP-based server.
 + Waits for message, then processes message as need be.
 + replies to client
 
Server should:
 + Store all of its data in an on-disk file ("file system image")

File system Image:
 + contains on-disk representation of your data structures and can use open(), read(), write(), lseek(), close(), fsync() on it.
 + is a Log-structured File System -- See Book
 + Consists of a Checkpoint Region, log, iNode Map, iNode, Directories
 
1. Checkpoint Region:
 + First structure is a singular checkpoint region
     - checkpoint region contains a disk pointer to the current END of the log
     - Also pointers to pieces of the inode map (assume maximum of 4096 nodes, and each piece of the inode map has 16 entries).
     
2. Log:
 + Other than CR, just consists of ever-growing log
     - No need to implement "cleaning"
 + Whenever write to disc, just write all file system updates to the end of the log, then update the CR as need be.
 + Example: If adding new block to a file:
     - write the data block
     - write new version of inode
     - add new piece of inode map to end of log
     - when completed, update the CR with requisite new values

3. The iNode Map:
 + Just an array, indexed by inode number.
 + each entry is a 4-byte int, and is the disk address of the location of the inode
 
4. iNode consists of:
 + size field (number of the last byte in the file)
 + type field (regular or dir)
 + 14 ptrs - maximum file size is 14 * 4 KB block size = 56 KB
 
5. Directories:
 + Each dir has an inode, and points to one or more data blocks that contain directory entries.
 + Each dir entry consists of 64 bytes: a name and an inode number pair.
    - Name should be a fixed-length size of 60 bytes
    - iNode number is just an int (4 bytes)
 + When created, a dir contains two entries: the name: "." --> refers to this new dir's inode number, and ".." --> refers to parent dir's inode number.
 *****+ Dir entries not in use in an *allocated* 4 kb dir block, the inode number should == -1 
 
Server should:
 + When server is started, it is passed the name of the file system image file.
 + If it DNE, file server should create it, initialize if properly, and force it to disk.
    - Initialization includes creating the CR, initial inode map, and a single root dir with proper . and .. entries. Root inode num should be 0
 + If it exists, server should read in the CR region, and keep an in-mem version of it, as well as the entire inode map in memory as well.


*****Idempotency:
 + on any change to the file system state (such as a MFS_Write, MFS_Creat, or MFS_Unlink), all the dirtied buffers in the server are committed to the disk. 
 + The server can achieve this by calling fsync() on the file system image
 + before returning a success code, the file system should always fsync() the image
 + Why? if server crashes, client can timeout and retry the operation.
 + *****how to implement a timeout? 
    - with the select() interface.
    - select() calls allow us to wait for a reply on a certain socket descriptor (or more than one, though that is not needed here)
    - can even specify a timeout so client does not block forever waiting for data to be returned from the server. 
    - can wait for a reply for a certain amount of time, and if nothing is returned, try the operation again until it is successful
 
 
 
